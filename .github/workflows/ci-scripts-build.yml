# .github/workflows/ci-scripts-build.yml for use with EPICS Base ci-scripts
# (see: https://github.com/epics-base/ci-scripts)

# This is YAML - indentation levels are crucial

# Workflow name

name: Base

# Trigger on pushes and PRs to any branch
on:
  push:
    paths-ignore:
      - .appveyor.yml
  pull_request:

env:
    SETUP_PATH: .ci-local:.ci
    EPICS_TEST_IMPRECISE_TIMING: YES

jobs:
  build-base:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    # Set environment variables from matrix parameters
    env:
      BASE: ${{ matrix.base }}
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      WINE: ${{ matrix.wine }}
      RTEMS: ${{ matrix.rtems }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
    strategy:
      fail-fast: false
      matrix:
        # Job names also name artifacts, character limitations apply
        include:
          - os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "7.0"
            wine: "64"
            name: "7.0 Ub-20 gcc-9 + MinGW"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: static
            base: "7.0"
            wine: "64"
            name: "7.0 Ub-20 gcc-9 + MinGW, static"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "3.15"
            wine: "64"
            name: "3.15 Ub-20 gcc-9 + MinGW"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: static
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"
            name: "7.0 Ub-20 gcc-9 C++11, static"

          - os: ubuntu-16.04
            cmp: clang
            configuration: default
            base: "7.0"
            name: "7.0 Ub-16 clang-9"

          - os: ubuntu-20.04
            cmp: clang
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"
            name: "7.0 Ub-20 clang-10 C++11"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "7.0"
            rtems: "4.10"
            name: "7.0 Ub-20 gcc-9 + RT-4.10"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "7.0"
            rtems: "4.9"
            name: "7.0 Ub-20 gcc-9 + RT-4.9"

          - os: ubuntu-16.04
            cmp: gcc-4.8
            utoolchain: true
            configuration: default
            base: "7.0"
            name: "7.0 Ub-16 gcc-4.8"

          - os: ubuntu-16.04
            cmp: gcc-4.9
            utoolchain: true
            configuration: default
            base: "7.0"
            name: "7.0 Ub-16 gcc-4.9"

          - os: ubuntu-20.04
            cmp: gcc-8
            utoolchain: true
            configuration: default
            base: "7.0"
            name: "7.0 Ub-20 gcc-8"

          - os: ubuntu-20.04
            cmp: clang
            configuration: default
            base: "7.0"
            name: "7.0 Ub-20 clang-10"

          - os: macos-latest
            cmp: clang
            configuration: default
            base: "7.0"
            name: "7.0 MacOS clang-12"

          - os: windows-2019
            cmp: vs2019
            configuration: default
            base: "7.0"
            name: "7.0 Win2019 MSC-19"

          - os: windows-2019
            cmp: vs2019
            configuration: static
            base: "7.0"
            name: "7.0 Win2019 MSC-19, static"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Cache Dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache
        key: ${{ matrix.base }}/${{ matrix.os }}/${{ matrix.cmp }}/${{ matrix.configuration }}/${{ matrix.wine }}${{ matrix.rtems }}/${{ matrix.extra }}/1
    - name: "apt-get install"
      run: |
        sudo apt-get update
        sudo apt-get -y install qemu-system-x86 g++-mingw-w64-x86-64 gdb
      if: runner.os == 'Linux'
    - name: "apt-get install ${{ matrix.cmp }}"
      run: |
        sudo apt-get -y install software-properties-common
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get -y install ${{ matrix.cmp }}
      if: matrix.utoolchain
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py test
    - name: Upload tapfiles Artifact
      uses: actions/upload-artifact@v2
      with:
        name: tapfiles ${{ matrix.name }}
        path: '**/O.*/*.tap'
    - name: Collect and show test results
      run: python .ci/cue.py test-results
